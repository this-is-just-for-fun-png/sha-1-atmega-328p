
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000010e2  00001176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800182  00800182  000011f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f38  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066f  00000000  00000000  00002a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  000030ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  000033ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cbb  00000000  00000000  000037d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ee       	ldi	r30, 0xE2	; 226
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 38       	cpi	r26, 0x82	; 130
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e8       	ldi	r26, 0x82	; 130
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 39       	cpi	r26, 0x91	; 145
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <main>
      9e:	0c 94 6f 08 	jmp	0x10de	; 0x10de <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <f1>:
}
//receiving by polling
unsigned char usart_receive(void){
	while(!(UCSR0A & (1 << RXC0))){};
	return UDR0;
}
      a6:	8f 92       	push	r8
      a8:	9f 92       	push	r9
      aa:	af 92       	push	r10
      ac:	bf 92       	push	r11
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	49 01       	movw	r8, r18
      b8:	5a 01       	movw	r10, r20
      ba:	8e 24       	eor	r8, r14
      bc:	9f 24       	eor	r9, r15
      be:	a0 26       	eor	r10, r16
      c0:	b1 26       	eor	r11, r17
      c2:	dc 01       	movw	r26, r24
      c4:	cb 01       	movw	r24, r22
      c6:	88 21       	and	r24, r8
      c8:	99 21       	and	r25, r9
      ca:	aa 21       	and	r26, r10
      cc:	bb 21       	and	r27, r11
      ce:	bc 01       	movw	r22, r24
      d0:	cd 01       	movw	r24, r26
      d2:	6e 25       	eor	r22, r14
      d4:	7f 25       	eor	r23, r15
      d6:	80 27       	eor	r24, r16
      d8:	91 27       	eor	r25, r17
      da:	1f 91       	pop	r17
      dc:	0f 91       	pop	r16
      de:	ff 90       	pop	r15
      e0:	ef 90       	pop	r14
      e2:	bf 90       	pop	r11
      e4:	af 90       	pop	r10
      e6:	9f 90       	pop	r9
      e8:	8f 90       	pop	r8
      ea:	08 95       	ret

000000ec <f2>:
      ec:	ef 92       	push	r14
      ee:	ff 92       	push	r15
      f0:	0f 93       	push	r16
      f2:	1f 93       	push	r17
      f4:	dc 01       	movw	r26, r24
      f6:	cb 01       	movw	r24, r22
      f8:	82 27       	eor	r24, r18
      fa:	93 27       	eor	r25, r19
      fc:	a4 27       	eor	r26, r20
      fe:	b5 27       	eor	r27, r21
     100:	bc 01       	movw	r22, r24
     102:	cd 01       	movw	r24, r26
     104:	6e 25       	eor	r22, r14
     106:	7f 25       	eor	r23, r15
     108:	80 27       	eor	r24, r16
     10a:	91 27       	eor	r25, r17
     10c:	1f 91       	pop	r17
     10e:	0f 91       	pop	r16
     110:	ff 90       	pop	r15
     112:	ef 90       	pop	r14
     114:	08 95       	ret

00000116 <f3>:
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	49 01       	movw	r8, r18
     12c:	5a 01       	movw	r10, r20
     12e:	8e 28       	or	r8, r14
     130:	9f 28       	or	r9, r15
     132:	a0 2a       	or	r10, r16
     134:	b1 2a       	or	r11, r17
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	88 21       	and	r24, r8
     13c:	99 21       	and	r25, r9
     13e:	aa 21       	and	r26, r10
     140:	bb 21       	and	r27, r11
     142:	59 01       	movw	r10, r18
     144:	6a 01       	movw	r12, r20
     146:	ae 20       	and	r10, r14
     148:	bf 20       	and	r11, r15
     14a:	c0 22       	and	r12, r16
     14c:	d1 22       	and	r13, r17
     14e:	bc 01       	movw	r22, r24
     150:	cd 01       	movw	r24, r26
     152:	6a 29       	or	r22, r10
     154:	7b 29       	or	r23, r11
     156:	8c 29       	or	r24, r12
     158:	9d 29       	or	r25, r13
     15a:	1f 91       	pop	r17
     15c:	0f 91       	pop	r16
     15e:	ff 90       	pop	r15
     160:	ef 90       	pop	r14
     162:	df 90       	pop	r13
     164:	cf 90       	pop	r12
     166:	bf 90       	pop	r11
     168:	af 90       	pop	r10
     16a:	9f 90       	pop	r9
     16c:	8f 90       	pop	r8
     16e:	08 95       	ret

00000170 <f4>:
     170:	ef 92       	push	r14
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	dc 01       	movw	r26, r24
     17a:	cb 01       	movw	r24, r22
     17c:	82 27       	eor	r24, r18
     17e:	93 27       	eor	r25, r19
     180:	a4 27       	eor	r26, r20
     182:	b5 27       	eor	r27, r21
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	6e 25       	eor	r22, r14
     18a:	7f 25       	eor	r23, r15
     18c:	80 27       	eor	r24, r16
     18e:	91 27       	eor	r25, r17
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	08 95       	ret

0000019a <usart_init>:
     19a:	e1 ec       	ldi	r30, 0xC1	; 193
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	80 68       	ori	r24, 0x80	; 128
     1a2:	80 83       	st	Z, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	80 61       	ori	r24, 0x10	; 16
     1a8:	80 83       	st	Z, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	88 60       	ori	r24, 0x08	; 8
     1ae:	80 83       	st	Z, r24
     1b0:	e2 ec       	ldi	r30, 0xC2	; 194
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	8f 73       	andi	r24, 0x3F	; 63
     1b8:	80 83       	st	Z, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 7c       	andi	r24, 0xCF	; 207
     1be:	80 83       	st	Z, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	86 60       	ori	r24, 0x06	; 6
     1c4:	80 83       	st	Z, r24
     1c6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     1ca:	87 e6       	ldi	r24, 0x67	; 103
     1cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     1d0:	08 95       	ret

000001d2 <usart_put_byte>:
//sending when buffer is empty
void usart_put_byte(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0)));
     1d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     1d6:	95 ff       	sbrs	r25, 5
     1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <usart_put_byte>
	UDR0 = data;
     1da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     1de:	08 95       	ret

000001e0 <usart_put_string>:
}
//passing string byte by byte
void usart_put_string(char *string_ptr){
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
	while(*string_ptr != '\0')
     1e6:	03 c0       	rjmp	.+6      	; 0x1ee <usart_put_string+0xe>
	{
		usart_put_byte(*string_ptr);
     1e8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <usart_put_byte>
		string_ptr++;
     1ec:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}
//passing string byte by byte
void usart_put_string(char *string_ptr){
	while(*string_ptr != '\0')
     1ee:	88 81       	ld	r24, Y
     1f0:	81 11       	cpse	r24, r1
     1f2:	fa cf       	rjmp	.-12     	; 0x1e8 <usart_put_string+0x8>
	{
		usart_put_byte(*string_ptr);
		string_ptr++;
	}
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <rotl>:
uint32_t f4(uint32_t B, uint32_t C, uint32_t D)
{
	return (B ^ C ^ D);
}
uint32_t rotl(uint32_t X, uint32_t n)
{
     1fa:	8f 92       	push	r8
     1fc:	9f 92       	push	r9
     1fe:	af 92       	push	r10
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
	return ((X << n) | (X >> (32-n)));
     20e:	6b 01       	movw	r12, r22
     210:	7c 01       	movw	r14, r24
     212:	02 2e       	mov	r0, r18
     214:	04 c0       	rjmp	.+8      	; 0x21e <rotl+0x24>
     216:	cc 0c       	add	r12, r12
     218:	dd 1c       	adc	r13, r13
     21a:	ee 1c       	adc	r14, r14
     21c:	ff 1c       	adc	r15, r15
     21e:	0a 94       	dec	r0
     220:	d2 f7       	brpl	.-12     	; 0x216 <rotl+0x1c>
     222:	49 01       	movw	r8, r18
     224:	5a 01       	movw	r10, r20
     226:	00 27       	eor	r16, r16
     228:	11 27       	eor	r17, r17
     22a:	98 01       	movw	r18, r16
     22c:	08 19       	sub	r16, r8
     22e:	19 09       	sbc	r17, r9
     230:	2a 09       	sbc	r18, r10
     232:	3b 09       	sbc	r19, r11
     234:	0f 71       	andi	r16, 0x1F	; 31
     236:	11 27       	eor	r17, r17
     238:	22 27       	eor	r18, r18
     23a:	33 27       	eor	r19, r19
     23c:	04 c0       	rjmp	.+8      	; 0x246 <rotl+0x4c>
     23e:	96 95       	lsr	r25
     240:	87 95       	ror	r24
     242:	77 95       	ror	r23
     244:	67 95       	ror	r22
     246:	0a 95       	dec	r16
     248:	d2 f7       	brpl	.-12     	; 0x23e <rotl+0x44>
     24a:	6c 29       	or	r22, r12
     24c:	7d 29       	or	r23, r13
     24e:	8e 29       	or	r24, r14
     250:	9f 29       	or	r25, r15
}
     252:	1f 91       	pop	r17
     254:	0f 91       	pop	r16
     256:	ff 90       	pop	r15
     258:	ef 90       	pop	r14
     25a:	df 90       	pop	r13
     25c:	cf 90       	pop	r12
     25e:	bf 90       	pop	r11
     260:	af 90       	pop	r10
     262:	9f 90       	pop	r9
     264:	8f 90       	pop	r8
     266:	08 95       	ret

00000268 <pad>:

//creating 512bit blocks out of the msg buffer and adding further information
//so that the block will fit to the requirements of the SHA-1 specification
void pad(unsigned char *msg, uint32_t *M)
{
     268:	4f 92       	push	r4
     26a:	5f 92       	push	r5
     26c:	6f 92       	push	r6
     26e:	7f 92       	push	r7
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	fb 01       	movw	r30, r22
	uint32_t count = 0;
	for(int i = 0; i < 16*blocks; i++)
     288:	c0 e0       	ldi	r28, 0x00	; 0
     28a:	d0 e0       	ldi	r29, 0x00	; 0

//creating 512bit blocks out of the msg buffer and adding further information
//so that the block will fit to the requirements of the SHA-1 specification
void pad(unsigned char *msg, uint32_t *M)
{
	uint32_t count = 0;
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	76 01       	movw	r14, r12
	for(int i = 0; i < 16*blocks; i++)
     292:	43 c0       	rjmp	.+134    	; 0x31a <pad+0xb2>
	{
		for(int k = 0; k < 4; k++)
		{
			if (msg[count] != '\0')
     294:	dc 01       	movw	r26, r24
     296:	ac 0d       	add	r26, r12
     298:	bd 1d       	adc	r27, r13
     29a:	4c 91       	ld	r20, X
     29c:	44 23       	and	r20, r20
     29e:	99 f1       	breq	.+102    	; 0x306 <pad+0x9e>
			{
				M[i] |= ((uint32_t)msg[count] << 8*(3-k));
     2a0:	de 01       	movw	r26, r28
     2a2:	aa 0f       	add	r26, r26
     2a4:	bb 1f       	adc	r27, r27
     2a6:	aa 0f       	add	r26, r26
     2a8:	bb 1f       	adc	r27, r27
     2aa:	ae 0f       	add	r26, r30
     2ac:	bf 1f       	adc	r27, r31
     2ae:	84 2e       	mov	r8, r20
     2b0:	91 2c       	mov	r9, r1
     2b2:	a1 2c       	mov	r10, r1
     2b4:	b1 2c       	mov	r11, r1
     2b6:	63 e0       	ldi	r22, 0x03	; 3
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	62 1b       	sub	r22, r18
     2bc:	73 0b       	sbc	r23, r19
     2be:	66 0f       	add	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	66 0f       	add	r22, r22
     2c4:	77 1f       	adc	r23, r23
     2c6:	66 0f       	add	r22, r22
     2c8:	77 1f       	adc	r23, r23
     2ca:	24 01       	movw	r4, r8
     2cc:	35 01       	movw	r6, r10
     2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <pad+0x70>
     2d0:	44 0c       	add	r4, r4
     2d2:	55 1c       	adc	r5, r5
     2d4:	66 1c       	adc	r6, r6
     2d6:	77 1c       	adc	r7, r7
     2d8:	6a 95       	dec	r22
     2da:	d2 f7       	brpl	.-12     	; 0x2d0 <pad+0x68>
     2dc:	b3 01       	movw	r22, r6
     2de:	a2 01       	movw	r20, r4
     2e0:	8d 90       	ld	r8, X+
     2e2:	9d 90       	ld	r9, X+
     2e4:	ad 90       	ld	r10, X+
     2e6:	bc 90       	ld	r11, X
     2e8:	13 97       	sbiw	r26, 0x03	; 3
     2ea:	48 29       	or	r20, r8
     2ec:	59 29       	or	r21, r9
     2ee:	6a 29       	or	r22, r10
     2f0:	7b 29       	or	r23, r11
     2f2:	4d 93       	st	X+, r20
     2f4:	5d 93       	st	X+, r21
     2f6:	6d 93       	st	X+, r22
     2f8:	7c 93       	st	X, r23
     2fa:	13 97       	sbiw	r26, 0x03	; 3
				count++;
     2fc:	4f ef       	ldi	r20, 0xFF	; 255
     2fe:	c4 1a       	sub	r12, r20
     300:	d4 0a       	sbc	r13, r20
     302:	e4 0a       	sbc	r14, r20
     304:	f4 0a       	sbc	r15, r20
void pad(unsigned char *msg, uint32_t *M)
{
	uint32_t count = 0;
	for(int i = 0; i < 16*blocks; i++)
	{
		for(int k = 0; k < 4; k++)
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	3f 4f       	sbci	r19, 0xFF	; 255
     30a:	02 c0       	rjmp	.+4      	; 0x310 <pad+0xa8>
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	24 30       	cpi	r18, 0x04	; 4
     312:	31 05       	cpc	r19, r1
     314:	0c f4       	brge	.+2      	; 0x318 <pad+0xb0>
     316:	be cf       	rjmp	.-132    	; 0x294 <pad+0x2c>
//creating 512bit blocks out of the msg buffer and adding further information
//so that the block will fit to the requirements of the SHA-1 specification
void pad(unsigned char *msg, uint32_t *M)
{
	uint32_t count = 0;
	for(int i = 0; i < 16*blocks; i++)
     318:	21 96       	adiw	r28, 0x01	; 1
     31a:	40 91 83 01 	lds	r20, 0x0183	; 0x800183 <blocks>
     31e:	50 91 84 01 	lds	r21, 0x0184	; 0x800184 <blocks+0x1>
     322:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <blocks+0x2>
     326:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <blocks+0x3>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	44 0f       	add	r20, r20
     334:	55 1f       	adc	r21, r21
     336:	66 1f       	adc	r22, r22
     338:	77 1f       	adc	r23, r23
     33a:	44 0f       	add	r20, r20
     33c:	55 1f       	adc	r21, r21
     33e:	66 1f       	adc	r22, r22
     340:	77 1f       	adc	r23, r23
     342:	44 0f       	add	r20, r20
     344:	55 1f       	adc	r21, r21
     346:	66 1f       	adc	r22, r22
     348:	77 1f       	adc	r23, r23
     34a:	4e 01       	movw	r8, r28
     34c:	0d 2e       	mov	r0, r29
     34e:	00 0c       	add	r0, r0
     350:	aa 08       	sbc	r10, r10
     352:	bb 08       	sbc	r11, r11
     354:	84 16       	cp	r8, r20
     356:	95 06       	cpc	r9, r21
     358:	a6 06       	cpc	r10, r22
     35a:	b7 06       	cpc	r11, r23
     35c:	b8 f2       	brcs	.-82     	; 0x30c <pad+0xa4>
				M[i] |= ((uint32_t)msg[count] << 8*(3-k));
				count++;
			}
		}
	}
	M[count/4] |= (0x80UL << 8*(3 - ((count) % 4)));
     35e:	d7 01       	movw	r26, r14
     360:	c6 01       	movw	r24, r12
     362:	b6 95       	lsr	r27
     364:	a7 95       	ror	r26
     366:	97 95       	ror	r25
     368:	87 95       	ror	r24
     36a:	b6 95       	lsr	r27
     36c:	a7 95       	ror	r26
     36e:	97 95       	ror	r25
     370:	87 95       	ror	r24
     372:	dc 01       	movw	r26, r24
     374:	aa 0f       	add	r26, r26
     376:	bb 1f       	adc	r27, r27
     378:	aa 0f       	add	r26, r26
     37a:	bb 1f       	adc	r27, r27
     37c:	ae 0f       	add	r26, r30
     37e:	bf 1f       	adc	r27, r31
     380:	b7 01       	movw	r22, r14
     382:	a6 01       	movw	r20, r12
     384:	40 95       	com	r20
     386:	50 95       	com	r21
     388:	60 95       	com	r22
     38a:	70 95       	com	r23
     38c:	43 70       	andi	r20, 0x03	; 3
     38e:	55 27       	eor	r21, r21
     390:	ca 01       	movw	r24, r20
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	40 e8       	ldi	r20, 0x80	; 128
     3a0:	50 e0       	ldi	r21, 0x00	; 0
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <pad+0x148>
     3a8:	44 0f       	add	r20, r20
     3aa:	55 1f       	adc	r21, r21
     3ac:	66 1f       	adc	r22, r22
     3ae:	77 1f       	adc	r23, r23
     3b0:	8a 95       	dec	r24
     3b2:	d2 f7       	brpl	.-12     	; 0x3a8 <pad+0x140>
     3b4:	8d 90       	ld	r8, X+
     3b6:	9d 90       	ld	r9, X+
     3b8:	ad 90       	ld	r10, X+
     3ba:	bc 90       	ld	r11, X
     3bc:	13 97       	sbiw	r26, 0x03	; 3
     3be:	48 29       	or	r20, r8
     3c0:	59 29       	or	r21, r9
     3c2:	6a 29       	or	r22, r10
     3c4:	7b 29       	or	r23, r11
     3c6:	4d 93       	st	X+, r20
     3c8:	5d 93       	st	X+, r21
     3ca:	6d 93       	st	X+, r22
     3cc:	7c 93       	st	X, r23
     3ce:	13 97       	sbiw	r26, 0x03	; 3
	uint64_t bits = count * 8;
     3d0:	cc 0c       	add	r12, r12
     3d2:	dd 1c       	adc	r13, r13
     3d4:	ee 1c       	adc	r14, r14
     3d6:	ff 1c       	adc	r15, r15
     3d8:	cc 0c       	add	r12, r12
     3da:	dd 1c       	adc	r13, r13
     3dc:	ee 1c       	adc	r14, r14
     3de:	ff 1c       	adc	r15, r15
     3e0:	cc 0c       	add	r12, r12
     3e2:	dd 1c       	adc	r13, r13
     3e4:	ee 1c       	adc	r14, r14
     3e6:	ff 1c       	adc	r15, r15
     3e8:	26 01       	movw	r4, r12
     3ea:	37 01       	movw	r6, r14
	M[16*blocks-2] = (bits >> 32);
     3ec:	c3 e8       	ldi	r28, 0x83	; 131
     3ee:	d1 e0       	ldi	r29, 0x01	; 1
     3f0:	a8 81       	ld	r26, Y
     3f2:	b9 81       	ldd	r27, Y+1	; 0x01
     3f4:	00 24       	eor	r0, r0
     3f6:	b6 95       	lsr	r27
     3f8:	a7 95       	ror	r26
     3fa:	07 94       	ror	r0
     3fc:	b6 95       	lsr	r27
     3fe:	a7 95       	ror	r26
     400:	07 94       	ror	r0
     402:	ba 2f       	mov	r27, r26
     404:	a0 2d       	mov	r26, r0
     406:	18 97       	sbiw	r26, 0x08	; 8
     408:	ae 0f       	add	r26, r30
     40a:	bf 1f       	adc	r27, r31
     40c:	2c 2d       	mov	r18, r12
     40e:	35 2d       	mov	r19, r5
     410:	46 2d       	mov	r20, r6
     412:	57 2d       	mov	r21, r7
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	00 e2       	ldi	r16, 0x20	; 32
     41e:	0e 94 09 06 	call	0xc12	; 0xc12 <__lshrdi3>
     422:	2c 93       	st	X, r18
     424:	11 96       	adiw	r26, 0x01	; 1
     426:	3c 93       	st	X, r19
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	4c 93       	st	X, r20
     42e:	12 97       	sbiw	r26, 0x02	; 2
     430:	13 96       	adiw	r26, 0x03	; 3
     432:	5c 93       	st	X, r21
	M[16*blocks-1] = bits;
     434:	88 81       	ld	r24, Y
     436:	99 81       	ldd	r25, Y+1	; 0x01
     438:	00 24       	eor	r0, r0
     43a:	96 95       	lsr	r25
     43c:	87 95       	ror	r24
     43e:	07 94       	ror	r0
     440:	96 95       	lsr	r25
     442:	87 95       	ror	r24
     444:	07 94       	ror	r0
     446:	98 2f       	mov	r25, r24
     448:	80 2d       	mov	r24, r0
     44a:	04 97       	sbiw	r24, 0x04	; 4
     44c:	e8 0f       	add	r30, r24
     44e:	f9 1f       	adc	r31, r25
     450:	c0 82       	st	Z, r12
     452:	d1 82       	std	Z+1, r13	; 0x01
     454:	e2 82       	std	Z+2, r14	; 0x02
     456:	f3 82       	std	Z+3, r15	; 0x03
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	df 90       	pop	r13
     464:	cf 90       	pop	r12
     466:	bf 90       	pop	r11
     468:	af 90       	pop	r10
     46a:	9f 90       	pop	r9
     46c:	8f 90       	pop	r8
     46e:	7f 90       	pop	r7
     470:	6f 90       	pop	r6
     472:	5f 90       	pop	r5
     474:	4f 90       	pop	r4
     476:	08 95       	ret

00000478 <process>:

//processing 512bit blocks with 160bit input buffer to get 160bit hash
void process(uint32_t *W, uint32_t *M)
{
     478:	2f 92       	push	r2
     47a:	3f 92       	push	r3
     47c:	4f 92       	push	r4
     47e:	5f 92       	push	r5
     480:	6f 92       	push	r6
     482:	7f 92       	push	r7
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	6a 97       	sbiw	r28, 0x1a	; 26
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	1b 01       	movw	r2, r22
	uint32_t temp = 0;
	for(uint32_t i = 0; i < blocks; i++)
     4ae:	1d 8a       	std	Y+21, r1	; 0x15
     4b0:	1e 8a       	std	Y+22, r1	; 0x16
     4b2:	1f 8a       	std	Y+23, r1	; 0x17
     4b4:	18 8e       	std	Y+24, r1	; 0x18
     4b6:	9a 8f       	std	Y+26, r25	; 0x1a
     4b8:	89 8f       	std	Y+25, r24	; 0x19
     4ba:	9e c1       	rjmp	.+828    	; 0x7f8 <process+0x380>
	{
		uint32_t A = H[0], B = H[1], C = H[2], D = H[3], E = H[4];
     4bc:	ee e0       	ldi	r30, 0x0E	; 14
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	00 81       	ld	r16, Z
     4c2:	11 81       	ldd	r17, Z+1	; 0x01
     4c4:	22 81       	ldd	r18, Z+2	; 0x02
     4c6:	33 81       	ldd	r19, Z+3	; 0x03
     4c8:	0d 83       	std	Y+5, r16	; 0x05
     4ca:	1e 83       	std	Y+6, r17	; 0x06
     4cc:	2f 83       	std	Y+7, r18	; 0x07
     4ce:	38 87       	std	Y+8, r19	; 0x08
     4d0:	24 81       	ldd	r18, Z+4	; 0x04
     4d2:	35 81       	ldd	r19, Z+5	; 0x05
     4d4:	46 81       	ldd	r20, Z+6	; 0x06
     4d6:	57 81       	ldd	r21, Z+7	; 0x07
     4d8:	29 87       	std	Y+9, r18	; 0x09
     4da:	3a 87       	std	Y+10, r19	; 0x0a
     4dc:	4b 87       	std	Y+11, r20	; 0x0b
     4de:	5c 87       	std	Y+12, r21	; 0x0c
     4e0:	80 85       	ldd	r24, Z+8	; 0x08
     4e2:	91 85       	ldd	r25, Z+9	; 0x09
     4e4:	a2 85       	ldd	r26, Z+10	; 0x0a
     4e6:	b3 85       	ldd	r27, Z+11	; 0x0b
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	9a 83       	std	Y+2, r25	; 0x02
     4ec:	ab 83       	std	Y+3, r26	; 0x03
     4ee:	bc 83       	std	Y+4, r27	; 0x04
     4f0:	04 85       	ldd	r16, Z+12	; 0x0c
     4f2:	15 85       	ldd	r17, Z+13	; 0x0d
     4f4:	26 85       	ldd	r18, Z+14	; 0x0e
     4f6:	37 85       	ldd	r19, Z+15	; 0x0f
     4f8:	0d 87       	std	Y+13, r16	; 0x0d
     4fa:	1e 87       	std	Y+14, r17	; 0x0e
     4fc:	2f 87       	std	Y+15, r18	; 0x0f
     4fe:	38 8b       	std	Y+16, r19	; 0x10
     500:	20 89       	ldd	r18, Z+16	; 0x10
     502:	31 89       	ldd	r19, Z+17	; 0x11
     504:	42 89       	ldd	r20, Z+18	; 0x12
     506:	53 89       	ldd	r21, Z+19	; 0x13
     508:	29 8b       	std	Y+17, r18	; 0x11
     50a:	3a 8b       	std	Y+18, r19	; 0x12
     50c:	4b 8b       	std	Y+19, r20	; 0x13
     50e:	5c 8b       	std	Y+20, r21	; 0x14
		for(uint32_t t = 0; t < 80; t++)
     510:	41 2c       	mov	r4, r1
     512:	51 2c       	mov	r5, r1
     514:	32 01       	movw	r6, r4
     516:	0b c1       	rjmp	.+534    	; 0x72e <process+0x2b6>
		{
			if(t < 16)
     518:	10 e1       	ldi	r17, 0x10	; 16
     51a:	41 16       	cp	r4, r17
     51c:	51 04       	cpc	r5, r1
     51e:	61 04       	cpc	r6, r1
     520:	71 04       	cpc	r7, r1
     522:	18 f5       	brcc	.+70     	; 0x56a <process+0xf2>
			{
				W[t] = M[t+(16*i)];
     524:	d2 01       	movw	r26, r4
     526:	aa 0f       	add	r26, r26
     528:	bb 1f       	adc	r27, r27
     52a:	aa 0f       	add	r26, r26
     52c:	bb 1f       	adc	r27, r27
     52e:	29 8d       	ldd	r18, Y+25	; 0x19
     530:	3a 8d       	ldd	r19, Y+26	; 0x1a
     532:	a2 0f       	add	r26, r18
     534:	b3 1f       	adc	r27, r19
     536:	ed 89       	ldd	r30, Y+21	; 0x15
     538:	fe 89       	ldd	r31, Y+22	; 0x16
     53a:	e2 95       	swap	r30
     53c:	f2 95       	swap	r31
     53e:	f0 7f       	andi	r31, 0xF0	; 240
     540:	fe 27       	eor	r31, r30
     542:	e0 7f       	andi	r30, 0xF0	; 240
     544:	fe 27       	eor	r31, r30
     546:	e4 0d       	add	r30, r4
     548:	f5 1d       	adc	r31, r5
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	ee 0f       	add	r30, r30
     550:	ff 1f       	adc	r31, r31
     552:	e2 0d       	add	r30, r2
     554:	f3 1d       	adc	r31, r3
     556:	40 81       	ld	r20, Z
     558:	51 81       	ldd	r21, Z+1	; 0x01
     55a:	62 81       	ldd	r22, Z+2	; 0x02
     55c:	73 81       	ldd	r23, Z+3	; 0x03
     55e:	4d 93       	st	X+, r20
     560:	5d 93       	st	X+, r21
     562:	6d 93       	st	X+, r22
     564:	7c 93       	st	X, r23
     566:	13 97       	sbiw	r26, 0x03	; 3
     568:	5b c0       	rjmp	.+182    	; 0x620 <process+0x1a8>
			}
			else
			{
				W[t] = rotl(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);
     56a:	72 01       	movw	r14, r4
     56c:	ee 0c       	add	r14, r14
     56e:	ff 1c       	adc	r15, r15
     570:	ee 0c       	add	r14, r14
     572:	ff 1c       	adc	r15, r15
     574:	49 8d       	ldd	r20, Y+25	; 0x19
     576:	5a 8d       	ldd	r21, Y+26	; 0x1a
     578:	e4 0e       	add	r14, r20
     57a:	f5 1e       	adc	r15, r21
     57c:	f2 01       	movw	r30, r4
     57e:	e3 50       	subi	r30, 0x03	; 3
     580:	f0 4c       	sbci	r31, 0xC0	; 192
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	e4 0f       	add	r30, r20
     58c:	f5 1f       	adc	r31, r21
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	a2 81       	ldd	r26, Z+2	; 0x02
     594:	b3 81       	ldd	r27, Z+3	; 0x03
     596:	f2 01       	movw	r30, r4
     598:	e8 50       	subi	r30, 0x08	; 8
     59a:	f0 4c       	sbci	r31, 0xC0	; 192
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e4 0f       	add	r30, r20
     5a6:	f5 1f       	adc	r31, r21
     5a8:	40 81       	ld	r20, Z
     5aa:	51 81       	ldd	r21, Z+1	; 0x01
     5ac:	62 81       	ldd	r22, Z+2	; 0x02
     5ae:	73 81       	ldd	r23, Z+3	; 0x03
     5b0:	84 27       	eor	r24, r20
     5b2:	95 27       	eor	r25, r21
     5b4:	a6 27       	eor	r26, r22
     5b6:	b7 27       	eor	r27, r23
     5b8:	f2 01       	movw	r30, r4
     5ba:	ee 50       	subi	r30, 0x0E	; 14
     5bc:	f0 4c       	sbci	r31, 0xC0	; 192
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	09 8d       	ldd	r16, Y+25	; 0x19
     5c8:	1a 8d       	ldd	r17, Y+26	; 0x1a
     5ca:	e0 0f       	add	r30, r16
     5cc:	f1 1f       	adc	r31, r17
     5ce:	40 81       	ld	r20, Z
     5d0:	51 81       	ldd	r21, Z+1	; 0x01
     5d2:	62 81       	ldd	r22, Z+2	; 0x02
     5d4:	73 81       	ldd	r23, Z+3	; 0x03
     5d6:	84 27       	eor	r24, r20
     5d8:	95 27       	eor	r25, r21
     5da:	a6 27       	eor	r26, r22
     5dc:	b7 27       	eor	r27, r23
     5de:	f2 01       	movw	r30, r4
     5e0:	e0 51       	subi	r30, 0x10	; 16
     5e2:	f0 4c       	sbci	r31, 0xC0	; 192
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	e0 0f       	add	r30, r16
     5ee:	f1 1f       	adc	r31, r17
     5f0:	40 81       	ld	r20, Z
     5f2:	51 81       	ldd	r21, Z+1	; 0x01
     5f4:	62 81       	ldd	r22, Z+2	; 0x02
     5f6:	73 81       	ldd	r23, Z+3	; 0x03
     5f8:	8c 01       	movw	r16, r24
     5fa:	9d 01       	movw	r18, r26
     5fc:	04 27       	eor	r16, r20
     5fe:	15 27       	eor	r17, r21
     600:	26 27       	eor	r18, r22
     602:	37 27       	eor	r19, r23
     604:	c9 01       	movw	r24, r18
     606:	b8 01       	movw	r22, r16
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rotl>
     614:	d7 01       	movw	r26, r14
     616:	6d 93       	st	X+, r22
     618:	7d 93       	st	X+, r23
     61a:	8d 93       	st	X+, r24
     61c:	9c 93       	st	X, r25
     61e:	13 97       	sbiw	r26, 0x03	; 3
			}
			temp = W[t] + K[t/20] + rotl(A, 5) + funktion[t/20](B,C,D) + E;
     620:	f2 01       	movw	r30, r4
     622:	ee 0f       	add	r30, r30
     624:	ff 1f       	adc	r31, r31
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	09 8d       	ldd	r16, Y+25	; 0x19
     62c:	1a 8d       	ldd	r17, Y+26	; 0x1a
     62e:	e0 0f       	add	r30, r16
     630:	f1 1f       	adc	r31, r17
     632:	80 80       	ld	r8, Z
     634:	91 80       	ldd	r9, Z+1	; 0x01
     636:	a2 80       	ldd	r10, Z+2	; 0x02
     638:	b3 80       	ldd	r11, Z+3	; 0x03
     63a:	c3 01       	movw	r24, r6
     63c:	b2 01       	movw	r22, r4
     63e:	24 e1       	ldi	r18, 0x14	; 20
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 e5 05 	call	0xbca	; 0xbca <__udivmodsi4>
     64a:	69 01       	movw	r12, r18
     64c:	7a 01       	movw	r14, r20
     64e:	f9 01       	movw	r30, r18
     650:	ee 0f       	add	r30, r30
     652:	ff 1f       	adc	r31, r31
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	ef 58       	subi	r30, 0x8F	; 143
     65a:	fe 4f       	sbci	r31, 0xFE	; 254
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	a2 81       	ldd	r26, Z+2	; 0x02
     662:	b3 81       	ldd	r27, Z+3	; 0x03
     664:	88 0e       	add	r8, r24
     666:	99 1e       	adc	r9, r25
     668:	aa 1e       	adc	r10, r26
     66a:	bb 1e       	adc	r11, r27
     66c:	25 e0       	ldi	r18, 0x05	; 5
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	6d 81       	ldd	r22, Y+5	; 0x05
     676:	7e 81       	ldd	r23, Y+6	; 0x06
     678:	8f 81       	ldd	r24, Y+7	; 0x07
     67a:	98 85       	ldd	r25, Y+8	; 0x08
     67c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rotl>
     680:	86 0e       	add	r8, r22
     682:	97 1e       	adc	r9, r23
     684:	a8 1e       	adc	r10, r24
     686:	b9 1e       	adc	r11, r25
     688:	c6 01       	movw	r24, r12
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	fc 01       	movw	r30, r24
     690:	ea 5f       	subi	r30, 0xFA	; 250
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	01 90       	ld	r0, Z+
     696:	f0 81       	ld	r31, Z
     698:	e0 2d       	mov	r30, r0
     69a:	ed 84       	ldd	r14, Y+13	; 0x0d
     69c:	fe 84       	ldd	r15, Y+14	; 0x0e
     69e:	0f 85       	ldd	r16, Y+15	; 0x0f
     6a0:	18 89       	ldd	r17, Y+16	; 0x10
     6a2:	29 81       	ldd	r18, Y+1	; 0x01
     6a4:	3a 81       	ldd	r19, Y+2	; 0x02
     6a6:	4b 81       	ldd	r20, Y+3	; 0x03
     6a8:	5c 81       	ldd	r21, Y+4	; 0x04
     6aa:	69 85       	ldd	r22, Y+9	; 0x09
     6ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     6ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b2:	09 95       	icall
     6b4:	75 01       	movw	r14, r10
     6b6:	64 01       	movw	r12, r8
     6b8:	c6 0e       	add	r12, r22
     6ba:	d7 1e       	adc	r13, r23
     6bc:	e8 1e       	adc	r14, r24
     6be:	f9 1e       	adc	r15, r25
     6c0:	29 89       	ldd	r18, Y+17	; 0x11
     6c2:	3a 89       	ldd	r19, Y+18	; 0x12
     6c4:	4b 89       	ldd	r20, Y+19	; 0x13
     6c6:	5c 89       	ldd	r21, Y+20	; 0x14
     6c8:	c2 0e       	add	r12, r18
     6ca:	d3 1e       	adc	r13, r19
     6cc:	e4 1e       	adc	r14, r20
     6ce:	f5 1e       	adc	r15, r21
			E = D;
			D = C;
			C = rotl(B, 30);
     6d0:	2e e1       	ldi	r18, 0x1E	; 30
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	69 85       	ldd	r22, Y+9	; 0x09
     6da:	7a 85       	ldd	r23, Y+10	; 0x0a
     6dc:	8b 85       	ldd	r24, Y+11	; 0x0b
     6de:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <rotl>
{
	uint32_t temp = 0;
	for(uint32_t i = 0; i < blocks; i++)
	{
		uint32_t A = H[0], B = H[1], C = H[2], D = H[3], E = H[4];
		for(uint32_t t = 0; t < 80; t++)
     6e4:	3f ef       	ldi	r19, 0xFF	; 255
     6e6:	43 1a       	sub	r4, r19
     6e8:	53 0a       	sbc	r5, r19
     6ea:	63 0a       	sbc	r6, r19
     6ec:	73 0a       	sbc	r7, r19
			else
			{
				W[t] = rotl(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16], 1);
			}
			temp = W[t] + K[t/20] + rotl(A, 5) + funktion[t/20](B,C,D) + E;
			E = D;
     6ee:	0d 85       	ldd	r16, Y+13	; 0x0d
     6f0:	1e 85       	ldd	r17, Y+14	; 0x0e
     6f2:	2f 85       	ldd	r18, Y+15	; 0x0f
     6f4:	38 89       	ldd	r19, Y+16	; 0x10
     6f6:	09 8b       	std	Y+17, r16	; 0x11
     6f8:	1a 8b       	std	Y+18, r17	; 0x12
     6fa:	2b 8b       	std	Y+19, r18	; 0x13
     6fc:	3c 8b       	std	Y+20, r19	; 0x14
			D = C;
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	4b 81       	ldd	r20, Y+3	; 0x03
     704:	5c 81       	ldd	r21, Y+4	; 0x04
     706:	2d 87       	std	Y+13, r18	; 0x0d
     708:	3e 87       	std	Y+14, r19	; 0x0e
     70a:	4f 87       	std	Y+15, r20	; 0x0f
     70c:	58 8b       	std	Y+16, r21	; 0x10
			C = rotl(B, 30);
     70e:	69 83       	std	Y+1, r22	; 0x01
     710:	7a 83       	std	Y+2, r23	; 0x02
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	9c 83       	std	Y+4, r25	; 0x04
			B = A;
     716:	8d 81       	ldd	r24, Y+5	; 0x05
     718:	9e 81       	ldd	r25, Y+6	; 0x06
     71a:	af 81       	ldd	r26, Y+7	; 0x07
     71c:	b8 85       	ldd	r27, Y+8	; 0x08
     71e:	89 87       	std	Y+9, r24	; 0x09
     720:	9a 87       	std	Y+10, r25	; 0x0a
     722:	ab 87       	std	Y+11, r26	; 0x0b
     724:	bc 87       	std	Y+12, r27	; 0x0c
			A = temp;
     726:	cd 82       	std	Y+5, r12	; 0x05
     728:	de 82       	std	Y+6, r13	; 0x06
     72a:	ef 82       	std	Y+7, r14	; 0x07
     72c:	f8 86       	std	Y+8, r15	; 0x08
{
	uint32_t temp = 0;
	for(uint32_t i = 0; i < blocks; i++)
	{
		uint32_t A = H[0], B = H[1], C = H[2], D = H[3], E = H[4];
		for(uint32_t t = 0; t < 80; t++)
     72e:	90 e5       	ldi	r25, 0x50	; 80
     730:	49 16       	cp	r4, r25
     732:	51 04       	cpc	r5, r1
     734:	61 04       	cpc	r6, r1
     736:	71 04       	cpc	r7, r1
     738:	08 f4       	brcc	.+2      	; 0x73c <process+0x2c4>
     73a:	ee ce       	rjmp	.-548    	; 0x518 <process+0xa0>
			D = C;
			C = rotl(B, 30);
			B = A;
			A = temp;
		}
		H[0] += A;
     73c:	ee e0       	ldi	r30, 0x0E	; 14
     73e:	f1 e0       	ldi	r31, 0x01	; 1
     740:	80 81       	ld	r24, Z
     742:	91 81       	ldd	r25, Z+1	; 0x01
     744:	a2 81       	ldd	r26, Z+2	; 0x02
     746:	b3 81       	ldd	r27, Z+3	; 0x03
     748:	0d 81       	ldd	r16, Y+5	; 0x05
     74a:	1e 81       	ldd	r17, Y+6	; 0x06
     74c:	2f 81       	ldd	r18, Y+7	; 0x07
     74e:	38 85       	ldd	r19, Y+8	; 0x08
     750:	80 0f       	add	r24, r16
     752:	91 1f       	adc	r25, r17
     754:	a2 1f       	adc	r26, r18
     756:	b3 1f       	adc	r27, r19
     758:	80 83       	st	Z, r24
     75a:	91 83       	std	Z+1, r25	; 0x01
     75c:	a2 83       	std	Z+2, r26	; 0x02
     75e:	b3 83       	std	Z+3, r27	; 0x03
		H[1] += B;
     760:	84 81       	ldd	r24, Z+4	; 0x04
     762:	95 81       	ldd	r25, Z+5	; 0x05
     764:	a6 81       	ldd	r26, Z+6	; 0x06
     766:	b7 81       	ldd	r27, Z+7	; 0x07
     768:	29 85       	ldd	r18, Y+9	; 0x09
     76a:	3a 85       	ldd	r19, Y+10	; 0x0a
     76c:	4b 85       	ldd	r20, Y+11	; 0x0b
     76e:	5c 85       	ldd	r21, Y+12	; 0x0c
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	a4 1f       	adc	r26, r20
     776:	b5 1f       	adc	r27, r21
     778:	84 83       	std	Z+4, r24	; 0x04
     77a:	95 83       	std	Z+5, r25	; 0x05
     77c:	a6 83       	std	Z+6, r26	; 0x06
     77e:	b7 83       	std	Z+7, r27	; 0x07
		H[2] += C;
     780:	80 85       	ldd	r24, Z+8	; 0x08
     782:	91 85       	ldd	r25, Z+9	; 0x09
     784:	a2 85       	ldd	r26, Z+10	; 0x0a
     786:	b3 85       	ldd	r27, Z+11	; 0x0b
     788:	09 81       	ldd	r16, Y+1	; 0x01
     78a:	1a 81       	ldd	r17, Y+2	; 0x02
     78c:	2b 81       	ldd	r18, Y+3	; 0x03
     78e:	3c 81       	ldd	r19, Y+4	; 0x04
     790:	80 0f       	add	r24, r16
     792:	91 1f       	adc	r25, r17
     794:	a2 1f       	adc	r26, r18
     796:	b3 1f       	adc	r27, r19
     798:	80 87       	std	Z+8, r24	; 0x08
     79a:	91 87       	std	Z+9, r25	; 0x09
     79c:	a2 87       	std	Z+10, r26	; 0x0a
     79e:	b3 87       	std	Z+11, r27	; 0x0b
		H[3] += D;
     7a0:	84 85       	ldd	r24, Z+12	; 0x0c
     7a2:	95 85       	ldd	r25, Z+13	; 0x0d
     7a4:	a6 85       	ldd	r26, Z+14	; 0x0e
     7a6:	b7 85       	ldd	r27, Z+15	; 0x0f
     7a8:	2d 85       	ldd	r18, Y+13	; 0x0d
     7aa:	3e 85       	ldd	r19, Y+14	; 0x0e
     7ac:	4f 85       	ldd	r20, Y+15	; 0x0f
     7ae:	58 89       	ldd	r21, Y+16	; 0x10
     7b0:	82 0f       	add	r24, r18
     7b2:	93 1f       	adc	r25, r19
     7b4:	a4 1f       	adc	r26, r20
     7b6:	b5 1f       	adc	r27, r21
     7b8:	84 87       	std	Z+12, r24	; 0x0c
     7ba:	95 87       	std	Z+13, r25	; 0x0d
     7bc:	a6 87       	std	Z+14, r26	; 0x0e
     7be:	b7 87       	std	Z+15, r27	; 0x0f
		H[4] += E;
     7c0:	80 89       	ldd	r24, Z+16	; 0x10
     7c2:	91 89       	ldd	r25, Z+17	; 0x11
     7c4:	a2 89       	ldd	r26, Z+18	; 0x12
     7c6:	b3 89       	ldd	r27, Z+19	; 0x13
     7c8:	09 89       	ldd	r16, Y+17	; 0x11
     7ca:	1a 89       	ldd	r17, Y+18	; 0x12
     7cc:	2b 89       	ldd	r18, Y+19	; 0x13
     7ce:	3c 89       	ldd	r19, Y+20	; 0x14
     7d0:	80 0f       	add	r24, r16
     7d2:	91 1f       	adc	r25, r17
     7d4:	a2 1f       	adc	r26, r18
     7d6:	b3 1f       	adc	r27, r19
     7d8:	80 8b       	std	Z+16, r24	; 0x10
     7da:	91 8b       	std	Z+17, r25	; 0x11
     7dc:	a2 8b       	std	Z+18, r26	; 0x12
     7de:	b3 8b       	std	Z+19, r27	; 0x13

//processing 512bit blocks with 160bit input buffer to get 160bit hash
void process(uint32_t *W, uint32_t *M)
{
	uint32_t temp = 0;
	for(uint32_t i = 0; i < blocks; i++)
     7e0:	2d 89       	ldd	r18, Y+21	; 0x15
     7e2:	3e 89       	ldd	r19, Y+22	; 0x16
     7e4:	4f 89       	ldd	r20, Y+23	; 0x17
     7e6:	58 8d       	ldd	r21, Y+24	; 0x18
     7e8:	2f 5f       	subi	r18, 0xFF	; 255
     7ea:	3f 4f       	sbci	r19, 0xFF	; 255
     7ec:	4f 4f       	sbci	r20, 0xFF	; 255
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255
     7f0:	2d 8b       	std	Y+21, r18	; 0x15
     7f2:	3e 8b       	std	Y+22, r19	; 0x16
     7f4:	4f 8b       	std	Y+23, r20	; 0x17
     7f6:	58 8f       	std	Y+24, r21	; 0x18
     7f8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <blocks>
     7fc:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <blocks+0x1>
     800:	a0 91 85 01 	lds	r26, 0x0185	; 0x800185 <blocks+0x2>
     804:	b0 91 86 01 	lds	r27, 0x0186	; 0x800186 <blocks+0x3>
     808:	0d 89       	ldd	r16, Y+21	; 0x15
     80a:	1e 89       	ldd	r17, Y+22	; 0x16
     80c:	2f 89       	ldd	r18, Y+23	; 0x17
     80e:	38 8d       	ldd	r19, Y+24	; 0x18
     810:	08 17       	cp	r16, r24
     812:	19 07       	cpc	r17, r25
     814:	2a 07       	cpc	r18, r26
     816:	3b 07       	cpc	r19, r27
     818:	08 f4       	brcc	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	50 ce       	rjmp	.-864    	; 0x4bc <process+0x44>
		H[1] += B;
		H[2] += C;
		H[3] += D;
		H[4] += E;
	}
}
     81c:	6a 96       	adiw	r28, 0x1a	; 26
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	bf 90       	pop	r11
     83a:	af 90       	pop	r10
     83c:	9f 90       	pop	r9
     83e:	8f 90       	pop	r8
     840:	7f 90       	pop	r7
     842:	6f 90       	pop	r6
     844:	5f 90       	pop	r5
     846:	4f 90       	pop	r4
     848:	3f 90       	pop	r3
     84a:	2f 90       	pop	r2
     84c:	08 95       	ret

0000084e <print_char>:

//sending final hash by USART to serial monitor & setting H[n] to original value
void print_char(uint32_t *H, const uint32_t *Ho)
{
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	6c 01       	movw	r12, r24
     860:	7b 01       	movw	r14, r22
	for(int i = 0; i < 5; i++)
     862:	00 e0       	ldi	r16, 0x00	; 0
     864:	10 e0       	ldi	r17, 0x00	; 0
     866:	27 c0       	rjmp	.+78     	; 0x8b6 <print_char+0x68>
	{
		for(int k = 0; k < 4; k++)
		{
			usart_put_byte((H[i] >> (8*(3-k))));
     868:	f8 01       	movw	r30, r16
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	ec 0d       	add	r30, r12
     874:	fd 1d       	adc	r31, r13
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	a2 81       	ldd	r26, Z+2	; 0x02
     87c:	b3 81       	ldd	r27, Z+3	; 0x03
     87e:	23 e0       	ldi	r18, 0x03	; 3
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	2c 1b       	sub	r18, r28
     884:	3d 0b       	sbc	r19, r29
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	22 0f       	add	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	04 c0       	rjmp	.+8      	; 0x89c <print_char+0x4e>
     894:	b6 95       	lsr	r27
     896:	a7 95       	ror	r26
     898:	97 95       	ror	r25
     89a:	87 95       	ror	r24
     89c:	2a 95       	dec	r18
     89e:	d2 f7       	brpl	.-12     	; 0x894 <print_char+0x46>
     8a0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <usart_put_byte>
//sending final hash by USART to serial monitor & setting H[n] to original value
void print_char(uint32_t *H, const uint32_t *Ho)
{
	for(int i = 0; i < 5; i++)
	{
		for(int k = 0; k < 4; k++)
     8a4:	21 96       	adiw	r28, 0x01	; 1
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <print_char+0x5e>
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	c4 30       	cpi	r28, 0x04	; 4
     8ae:	d1 05       	cpc	r29, r1
     8b0:	dc f2       	brlt	.-74     	; 0x868 <print_char+0x1a>
}

//sending final hash by USART to serial monitor & setting H[n] to original value
void print_char(uint32_t *H, const uint32_t *Ho)
{
	for(int i = 0; i < 5; i++)
     8b2:	0f 5f       	subi	r16, 0xFF	; 255
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	05 30       	cpi	r16, 0x05	; 5
     8b8:	11 05       	cpc	r17, r1
     8ba:	b4 f3       	brlt	.-20     	; 0x8a8 <print_char+0x5a>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	16 c0       	rjmp	.+44     	; 0x8ec <print_char+0x9e>
			usart_put_byte((H[i] >> (8*(3-k))));
		}
	}
	for(unsigned char i = 0; i < 5; i++)
	{
		H[i] = Ho[i];
     8c0:	82 2f       	mov	r24, r18
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	f6 01       	movw	r30, r12
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	d7 01       	movw	r26, r14
     8d4:	a8 0f       	add	r26, r24
     8d6:	b9 1f       	adc	r27, r25
     8d8:	8d 91       	ld	r24, X+
     8da:	9d 91       	ld	r25, X+
     8dc:	0d 90       	ld	r0, X+
     8de:	bc 91       	ld	r27, X
     8e0:	a0 2d       	mov	r26, r0
     8e2:	80 83       	st	Z, r24
     8e4:	91 83       	std	Z+1, r25	; 0x01
     8e6:	a2 83       	std	Z+2, r26	; 0x02
     8e8:	b3 83       	std	Z+3, r27	; 0x03
		for(int k = 0; k < 4; k++)
		{
			usart_put_byte((H[i] >> (8*(3-k))));
		}
	}
	for(unsigned char i = 0; i < 5; i++)
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	25 30       	cpi	r18, 0x05	; 5
     8ee:	40 f3       	brcs	.-48     	; 0x8c0 <print_char+0x72>
	{
		H[i] = Ho[i];
	}
}
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	1f 91       	pop	r17
     8f6:	0f 91       	pop	r16
     8f8:	ff 90       	pop	r15
     8fa:	ef 90       	pop	r14
     8fc:	df 90       	pop	r13
     8fe:	cf 90       	pop	r12
     900:	08 95       	ret

00000902 <error>:

//handling error codes
void error(unsigned int n)
{
	switch(n)
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	91 05       	cpc	r25, r1
     906:	19 f0       	breq	.+6      	; 0x90e <error+0xc>
     908:	02 97       	sbiw	r24, 0x02	; 2
     90a:	31 f0       	breq	.+12     	; 0x918 <error+0x16>
     90c:	0a c0       	rjmp	.+20     	; 0x922 <error+0x20>
	{
		case 1: usart_put_string("No SRAM available.\n"); break;
     90e:	82 e2       	ldi	r24, 0x22	; 34
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_put_string>
     916:	09 c0       	rjmp	.+18     	; 0x92a <error+0x28>
		case 2: usart_put_string("MSG too long.\n"); break;
     918:	86 e3       	ldi	r24, 0x36	; 54
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_put_string>
     920:	04 c0       	rjmp	.+8      	; 0x92a <error+0x28>
		default: usart_put_string("error xxx\n"); break;
     922:	85 e4       	ldi	r24, 0x45	; 69
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_put_string>
	}
	usart_put_string("restart uC!\n");
     92a:	80 e5       	ldi	r24, 0x50	; 80
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <usart_put_string>
     932:	ff cf       	rjmp	.-2      	; 0x932 <error+0x30>

00000934 <de_init>:
	while(1);
}

//free allocated mem and setting ptr to NULL
void de_init(uint32_t *W, uint32_t *M)
{
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	cb 01       	movw	r24, r22
	free (M);
     93c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <free>
	M = NULL;
	free (W);
     940:	ce 01       	movw	r24, r28
     942:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <free>
	W = NULL;
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	08 95       	ret

0000094c <__vector_18>:

//receiving msg by USART interrupt from serial monitor
ISR(USART_RX_vect){
     94c:	1f 92       	push	r1
     94e:	0f 92       	push	r0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	0f 92       	push	r0
     954:	11 24       	eor	r1, r1
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	ef 93       	push	r30
     96c:	ff 93       	push	r31
	msg = realloc(msg, (len+2)*sizeof(unsigned char));
     96e:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <len>
     972:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <len+0x1>
     976:	6e 5f       	subi	r22, 0xFE	; 254
     978:	7f 4f       	sbci	r23, 0xFF	; 255
     97a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <msg>
     97e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <msg+0x1>
     982:	0e 94 62 07 	call	0xec4	; 0xec4 <realloc>
     986:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <msg+0x1>
     98a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <msg>
	if(NULL == msg)
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	21 f4       	brne	.+8      	; 0x99a <__vector_18+0x4e>
	{
		error(1);
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 81 04 	call	0x902	; 0x902 <error>
	}
	msg[len] = UDR0;
     99a:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <len>
     99e:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <len+0x1>
     9a2:	fc 01       	movw	r30, r24
     9a4:	e2 0f       	add	r30, r18
     9a6:	f3 1f       	adc	r31, r19
     9a8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     9ac:	20 83       	st	Z, r18
	len++;
     9ae:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <len>
     9b2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <len+0x1>
     9b6:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <len+0x2>
     9ba:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <len+0x3>
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	a1 1d       	adc	r26, r1
     9c2:	b1 1d       	adc	r27, r1
     9c4:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <len>
     9c8:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <len+0x1>
     9cc:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <len+0x2>
     9d0:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <len+0x3>
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <main>:

#include "SHA_1.c"

int main()
{
	usart_init();
     9f6:	0e 94 cd 00 	call	0x19a	; 0x19a <usart_init>
	sei();
     9fa:	78 94       	sei
	uint32_t *M;
	uint32_t *W;
	msg = malloc(sizeof(unsigned char));
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 41 06 	call	0xc82	; 0xc82 <malloc>
     a04:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <msg+0x1>
     a08:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <msg>
	while(1)
	{
		if (1000 <= len)
     a0c:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <len>
     a10:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <len+0x1>
     a14:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <len+0x2>
     a18:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <len+0x3>
     a1c:	88 3e       	cpi	r24, 0xE8	; 232
     a1e:	23 e0       	ldi	r18, 0x03	; 3
     a20:	92 07       	cpc	r25, r18
     a22:	a1 05       	cpc	r26, r1
     a24:	b1 05       	cpc	r27, r1
     a26:	20 f0       	brcs	.+8      	; 0xa30 <main+0x3a>
		{
			error(2);
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 81 04 	call	0x902	; 0x902 <error>
		}
		if (msg[len-2] == '#' && msg[len-1] == '!' && 0 == failsafe)
     a30:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <msg>
     a34:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <msg+0x1>
     a38:	ec 01       	movw	r28, r24
     a3a:	22 97       	sbiw	r28, 0x02	; 2
     a3c:	c2 0f       	add	r28, r18
     a3e:	d3 1f       	adc	r29, r19
     a40:	48 81       	ld	r20, Y
     a42:	43 32       	cpi	r20, 0x23	; 35
     a44:	09 f0       	breq	.+2      	; 0xa48 <main+0x52>
     a46:	7d c0       	rjmp	.+250    	; 0xb42 <main+0x14c>
     a48:	28 0f       	add	r18, r24
     a4a:	39 1f       	adc	r19, r25
     a4c:	f9 01       	movw	r30, r18
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	20 81       	ld	r18, Z
     a52:	21 32       	cpi	r18, 0x21	; 33
     a54:	09 f0       	breq	.+2      	; 0xa58 <main+0x62>
     a56:	75 c0       	rjmp	.+234    	; 0xb42 <main+0x14c>
     a58:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <__data_end>
     a5c:	21 11       	cpse	r18, r1
     a5e:	71 c0       	rjmp	.+226    	; 0xb42 <main+0x14c>
		{
			blocks = 1 + (len * 8 / 448);
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	aa 1f       	adc	r26, r26
     a66:	bb 1f       	adc	r27, r27
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	aa 1f       	adc	r26, r26
     a6e:	bb 1f       	adc	r27, r27
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	88 1f       	adc	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	20 ec       	ldi	r18, 0xC0	; 192
     a7e:	31 e0       	ldi	r19, 0x01	; 1
     a80:	40 e0       	ldi	r20, 0x00	; 0
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	0e 94 e5 05 	call	0xbca	; 0xbca <__udivmodsi4>
     a88:	da 01       	movw	r26, r20
     a8a:	c9 01       	movw	r24, r18
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	a1 1d       	adc	r26, r1
     a90:	b1 1d       	adc	r27, r1
     a92:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <blocks>
     a96:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <blocks+0x1>
     a9a:	a0 93 85 01 	sts	0x0185, r26	; 0x800185 <blocks+0x2>
     a9e:	b0 93 86 01 	sts	0x0186, r27	; 0x800186 <blocks+0x3>
			msg[len-2] ='\0';
     aa2:	18 82       	st	Y, r1
			msg[len-1] ='\0';
     aa4:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <len>
     aa8:	f0 91 88 01 	lds	r31, 0x0188	; 0x800188 <len+0x1>
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <msg>
     ab2:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <msg+0x1>
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	10 82       	st	Z, r1
			M = calloc(16*blocks, sizeof(uint32_t));
     abc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <blocks>
     ac0:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <blocks+0x1>
     ac4:	64 e0       	ldi	r22, 0x04	; 4
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	82 95       	swap	r24
     aca:	92 95       	swap	r25
     acc:	90 7f       	andi	r25, 0xF0	; 240
     ace:	98 27       	eor	r25, r24
     ad0:	80 7f       	andi	r24, 0xF0	; 240
     ad2:	98 27       	eor	r25, r24
     ad4:	0e 94 25 06 	call	0xc4a	; 0xc4a <calloc>
     ad8:	ec 01       	movw	r28, r24
			W = calloc(80, sizeof(uint32_t));
     ada:	64 e0       	ldi	r22, 0x04	; 4
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e5       	ldi	r24, 0x50	; 80
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 25 06 	call	0xc4a	; 0xc4a <calloc>
     ae6:	8c 01       	movw	r16, r24
			if(NULL == W || NULL == M)
     ae8:	89 2b       	or	r24, r25
     aea:	11 f0       	breq	.+4      	; 0xaf0 <main+0xfa>
     aec:	20 97       	sbiw	r28, 0x00	; 0
     aee:	21 f4       	brne	.+8      	; 0xaf8 <main+0x102>
			{
				error(1);
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 81 04 	call	0x902	; 0x902 <error>
			}
			pad(msg, M);
     af8:	be 01       	movw	r22, r28
     afa:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <msg>
     afe:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <msg+0x1>
     b02:	0e 94 34 01 	call	0x268	; 0x268 <pad>
			process(W, M);
     b06:	be 01       	movw	r22, r28
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 3c 02 	call	0x478	; 0x478 <process>
			de_init(W, M);
     b0e:	be 01       	movw	r22, r28
     b10:	c8 01       	movw	r24, r16
     b12:	0e 94 9a 04 	call	0x934	; 0x934 <de_init>
			len -= 2;
     b16:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <len>
     b1a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <len+0x1>
     b1e:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <len+0x2>
     b22:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <len+0x3>
     b26:	02 97       	sbiw	r24, 0x02	; 2
     b28:	a1 09       	sbc	r26, r1
     b2a:	b1 09       	sbc	r27, r1
     b2c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <len>
     b30:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <len+0x1>
     b34:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <len+0x2>
     b38:	b0 93 8a 01 	sts	0x018A, r27	; 0x80018a <len+0x3>
			failsafe = 1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
		}
		if (msg[len-2] == '#' && msg[len-1] == '$' && 1 == failsafe)
     b42:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <msg>
     b46:	30 91 8c 01 	lds	r19, 0x018C	; 0x80018c <msg+0x1>
     b4a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <len>
     b4e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <len+0x1>
     b52:	f9 01       	movw	r30, r18
     b54:	e8 0f       	add	r30, r24
     b56:	f9 1f       	adc	r31, r25
     b58:	32 97       	sbiw	r30, 0x02	; 2
     b5a:	40 81       	ld	r20, Z
     b5c:	43 32       	cpi	r20, 0x23	; 35
     b5e:	09 f0       	breq	.+2      	; 0xb62 <main+0x16c>
     b60:	55 cf       	rjmp	.-342    	; 0xa0c <main+0x16>
     b62:	82 0f       	add	r24, r18
     b64:	93 1f       	adc	r25, r19
     b66:	fc 01       	movw	r30, r24
     b68:	31 97       	sbiw	r30, 0x01	; 1
     b6a:	80 81       	ld	r24, Z
     b6c:	84 32       	cpi	r24, 0x24	; 36
     b6e:	09 f0       	breq	.+2      	; 0xb72 <main+0x17c>
     b70:	4d cf       	rjmp	.-358    	; 0xa0c <main+0x16>
     b72:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <__data_end>
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <main+0x186>
     b7a:	48 cf       	rjmp	.-368    	; 0xa0c <main+0x16>
		{
			print_char(H, Ho);
     b7c:	6d e5       	ldi	r22, 0x5D	; 93
     b7e:	71 e0       	ldi	r23, 0x01	; 1
     b80:	8e e0       	ldi	r24, 0x0E	; 14
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 27 04 	call	0x84e	; 0x84e <print_char>
			len = 0;
     b88:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <len>
     b8c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <len+0x1>
     b90:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <len+0x2>
     b94:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <len+0x3>
			free(msg);
     b98:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <msg>
     b9c:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <msg+0x1>
     ba0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <free>
			msg = calloc((1), sizeof(unsigned char));
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 25 06 	call	0xc4a	; 0xc4a <calloc>
     bb0:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <msg+0x1>
     bb4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <msg>
			if(NULL == msg)
     bb8:	89 2b       	or	r24, r25
     bba:	21 f4       	brne	.+8      	; 0xbc4 <main+0x1ce>
			{
				error(1);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 81 04 	call	0x902	; 0x902 <error>
			}
			failsafe = 0;
     bc4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <__data_end>
     bc8:	21 cf       	rjmp	.-446    	; 0xa0c <main+0x16>

00000bca <__udivmodsi4>:
     bca:	a1 e2       	ldi	r26, 0x21	; 33
     bcc:	1a 2e       	mov	r1, r26
     bce:	aa 1b       	sub	r26, r26
     bd0:	bb 1b       	sub	r27, r27
     bd2:	fd 01       	movw	r30, r26
     bd4:	0d c0       	rjmp	.+26     	; 0xbf0 <__udivmodsi4_ep>

00000bd6 <__udivmodsi4_loop>:
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	ee 1f       	adc	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	a2 17       	cp	r26, r18
     be0:	b3 07       	cpc	r27, r19
     be2:	e4 07       	cpc	r30, r20
     be4:	f5 07       	cpc	r31, r21
     be6:	20 f0       	brcs	.+8      	; 0xbf0 <__udivmodsi4_ep>
     be8:	a2 1b       	sub	r26, r18
     bea:	b3 0b       	sbc	r27, r19
     bec:	e4 0b       	sbc	r30, r20
     bee:	f5 0b       	sbc	r31, r21

00000bf0 <__udivmodsi4_ep>:
     bf0:	66 1f       	adc	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	1a 94       	dec	r1
     bfa:	69 f7       	brne	.-38     	; 0xbd6 <__udivmodsi4_loop>
     bfc:	60 95       	com	r22
     bfe:	70 95       	com	r23
     c00:	80 95       	com	r24
     c02:	90 95       	com	r25
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	bd 01       	movw	r22, r26
     c0a:	cf 01       	movw	r24, r30
     c0c:	08 95       	ret

00000c0e <__ashrdi3>:
     c0e:	97 fb       	bst	r25, 7
     c10:	10 f8       	bld	r1, 0

00000c12 <__lshrdi3>:
     c12:	16 94       	lsr	r1
     c14:	00 08       	sbc	r0, r0
     c16:	0f 93       	push	r16
     c18:	08 30       	cpi	r16, 0x08	; 8
     c1a:	98 f0       	brcs	.+38     	; 0xc42 <__lshrdi3+0x30>
     c1c:	08 50       	subi	r16, 0x08	; 8
     c1e:	23 2f       	mov	r18, r19
     c20:	34 2f       	mov	r19, r20
     c22:	45 2f       	mov	r20, r21
     c24:	56 2f       	mov	r21, r22
     c26:	67 2f       	mov	r22, r23
     c28:	78 2f       	mov	r23, r24
     c2a:	89 2f       	mov	r24, r25
     c2c:	90 2d       	mov	r25, r0
     c2e:	f4 cf       	rjmp	.-24     	; 0xc18 <__lshrdi3+0x6>
     c30:	05 94       	asr	r0
     c32:	97 95       	ror	r25
     c34:	87 95       	ror	r24
     c36:	77 95       	ror	r23
     c38:	67 95       	ror	r22
     c3a:	57 95       	ror	r21
     c3c:	47 95       	ror	r20
     c3e:	37 95       	ror	r19
     c40:	27 95       	ror	r18
     c42:	0a 95       	dec	r16
     c44:	aa f7       	brpl	.-22     	; 0xc30 <__lshrdi3+0x1e>
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <calloc>:
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	86 9f       	mul	r24, r22
     c54:	80 01       	movw	r16, r0
     c56:	87 9f       	mul	r24, r23
     c58:	10 0d       	add	r17, r0
     c5a:	96 9f       	mul	r25, r22
     c5c:	10 0d       	add	r17, r0
     c5e:	11 24       	eor	r1, r1
     c60:	c8 01       	movw	r24, r16
     c62:	0e 94 41 06 	call	0xc82	; 0xc82 <malloc>
     c66:	ec 01       	movw	r28, r24
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	29 f0       	breq	.+10     	; 0xc76 <calloc+0x2c>
     c6c:	a8 01       	movw	r20, r16
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	0e 94 31 08 	call	0x1062	; 0x1062 <memset>
     c76:	ce 01       	movw	r24, r28
     c78:	df 91       	pop	r29
     c7a:	cf 91       	pop	r28
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	08 95       	ret

00000c82 <malloc>:
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	91 05       	cpc	r25, r1
     c8e:	10 f4       	brcc	.+4      	; 0xc94 <malloc+0x12>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	e0 91 8f 01 	lds	r30, 0x018F	; 0x80018f <__flp>
     c98:	f0 91 90 01 	lds	r31, 0x0190	; 0x800190 <__flp+0x1>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	a0 e0       	ldi	r26, 0x00	; 0
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	30 97       	sbiw	r30, 0x00	; 0
     ca6:	19 f1       	breq	.+70     	; 0xcee <malloc+0x6c>
     ca8:	40 81       	ld	r20, Z
     caa:	51 81       	ldd	r21, Z+1	; 0x01
     cac:	02 81       	ldd	r16, Z+2	; 0x02
     cae:	13 81       	ldd	r17, Z+3	; 0x03
     cb0:	48 17       	cp	r20, r24
     cb2:	59 07       	cpc	r21, r25
     cb4:	c8 f0       	brcs	.+50     	; 0xce8 <malloc+0x66>
     cb6:	84 17       	cp	r24, r20
     cb8:	95 07       	cpc	r25, r21
     cba:	69 f4       	brne	.+26     	; 0xcd6 <malloc+0x54>
     cbc:	10 97       	sbiw	r26, 0x00	; 0
     cbe:	31 f0       	breq	.+12     	; 0xccc <malloc+0x4a>
     cc0:	12 96       	adiw	r26, 0x02	; 2
     cc2:	0c 93       	st	X, r16
     cc4:	12 97       	sbiw	r26, 0x02	; 2
     cc6:	13 96       	adiw	r26, 0x03	; 3
     cc8:	1c 93       	st	X, r17
     cca:	27 c0       	rjmp	.+78     	; 0xd1a <malloc+0x98>
     ccc:	00 93 8f 01 	sts	0x018F, r16	; 0x80018f <__flp>
     cd0:	10 93 90 01 	sts	0x0190, r17	; 0x800190 <__flp+0x1>
     cd4:	22 c0       	rjmp	.+68     	; 0xd1a <malloc+0x98>
     cd6:	21 15       	cp	r18, r1
     cd8:	31 05       	cpc	r19, r1
     cda:	19 f0       	breq	.+6      	; 0xce2 <malloc+0x60>
     cdc:	42 17       	cp	r20, r18
     cde:	53 07       	cpc	r21, r19
     ce0:	18 f4       	brcc	.+6      	; 0xce8 <malloc+0x66>
     ce2:	9a 01       	movw	r18, r20
     ce4:	bd 01       	movw	r22, r26
     ce6:	ef 01       	movw	r28, r30
     ce8:	df 01       	movw	r26, r30
     cea:	f8 01       	movw	r30, r16
     cec:	db cf       	rjmp	.-74     	; 0xca4 <malloc+0x22>
     cee:	21 15       	cp	r18, r1
     cf0:	31 05       	cpc	r19, r1
     cf2:	f9 f0       	breq	.+62     	; 0xd32 <malloc+0xb0>
     cf4:	28 1b       	sub	r18, r24
     cf6:	39 0b       	sbc	r19, r25
     cf8:	24 30       	cpi	r18, 0x04	; 4
     cfa:	31 05       	cpc	r19, r1
     cfc:	80 f4       	brcc	.+32     	; 0xd1e <malloc+0x9c>
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	61 15       	cp	r22, r1
     d04:	71 05       	cpc	r23, r1
     d06:	21 f0       	breq	.+8      	; 0xd10 <malloc+0x8e>
     d08:	fb 01       	movw	r30, r22
     d0a:	93 83       	std	Z+3, r25	; 0x03
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <malloc+0x96>
     d10:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <__flp+0x1>
     d14:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <__flp>
     d18:	fe 01       	movw	r30, r28
     d1a:	32 96       	adiw	r30, 0x02	; 2
     d1c:	44 c0       	rjmp	.+136    	; 0xda6 <malloc+0x124>
     d1e:	fe 01       	movw	r30, r28
     d20:	e2 0f       	add	r30, r18
     d22:	f3 1f       	adc	r31, r19
     d24:	81 93       	st	Z+, r24
     d26:	91 93       	st	Z+, r25
     d28:	22 50       	subi	r18, 0x02	; 2
     d2a:	31 09       	sbc	r19, r1
     d2c:	39 83       	std	Y+1, r19	; 0x01
     d2e:	28 83       	st	Y, r18
     d30:	3a c0       	rjmp	.+116    	; 0xda6 <malloc+0x124>
     d32:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
     d36:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
     d3a:	23 2b       	or	r18, r19
     d3c:	41 f4       	brne	.+16     	; 0xd4e <malloc+0xcc>
     d3e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d42:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d46:	30 93 8e 01 	sts	0x018E, r19	; 0x80018e <__brkval+0x1>
     d4a:	20 93 8d 01 	sts	0x018D, r18	; 0x80018d <__brkval>
     d4e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d52:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	41 f4       	brne	.+16     	; 0xd6c <malloc+0xea>
     d5c:	2d b7       	in	r18, 0x3d	; 61
     d5e:	3e b7       	in	r19, 0x3e	; 62
     d60:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d64:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d68:	24 1b       	sub	r18, r20
     d6a:	35 0b       	sbc	r19, r21
     d6c:	e0 91 8d 01 	lds	r30, 0x018D	; 0x80018d <__brkval>
     d70:	f0 91 8e 01 	lds	r31, 0x018E	; 0x80018e <__brkval+0x1>
     d74:	e2 17       	cp	r30, r18
     d76:	f3 07       	cpc	r31, r19
     d78:	a0 f4       	brcc	.+40     	; 0xda2 <malloc+0x120>
     d7a:	2e 1b       	sub	r18, r30
     d7c:	3f 0b       	sbc	r19, r31
     d7e:	28 17       	cp	r18, r24
     d80:	39 07       	cpc	r19, r25
     d82:	78 f0       	brcs	.+30     	; 0xda2 <malloc+0x120>
     d84:	ac 01       	movw	r20, r24
     d86:	4e 5f       	subi	r20, 0xFE	; 254
     d88:	5f 4f       	sbci	r21, 0xFF	; 255
     d8a:	24 17       	cp	r18, r20
     d8c:	35 07       	cpc	r19, r21
     d8e:	48 f0       	brcs	.+18     	; 0xda2 <malloc+0x120>
     d90:	4e 0f       	add	r20, r30
     d92:	5f 1f       	adc	r21, r31
     d94:	50 93 8e 01 	sts	0x018E, r21	; 0x80018e <__brkval+0x1>
     d98:	40 93 8d 01 	sts	0x018D, r20	; 0x80018d <__brkval>
     d9c:	81 93       	st	Z+, r24
     d9e:	91 93       	st	Z+, r25
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <malloc+0x124>
     da2:	e0 e0       	ldi	r30, 0x00	; 0
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	cf 01       	movw	r24, r30
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <free>:
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	09 f4       	brne	.+2      	; 0xdbc <free+0xa>
     dba:	81 c0       	rjmp	.+258    	; 0xebe <free+0x10c>
     dbc:	fc 01       	movw	r30, r24
     dbe:	32 97       	sbiw	r30, 0x02	; 2
     dc0:	13 82       	std	Z+3, r1	; 0x03
     dc2:	12 82       	std	Z+2, r1	; 0x02
     dc4:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <__flp>
     dc8:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <__flp+0x1>
     dcc:	10 97       	sbiw	r26, 0x00	; 0
     dce:	81 f4       	brne	.+32     	; 0xdf0 <free+0x3e>
     dd0:	20 81       	ld	r18, Z
     dd2:	31 81       	ldd	r19, Z+1	; 0x01
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
     ddc:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	51 f5       	brne	.+84     	; 0xe3a <free+0x88>
     de6:	f0 93 8e 01 	sts	0x018E, r31	; 0x80018e <__brkval+0x1>
     dea:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <__brkval>
     dee:	67 c0       	rjmp	.+206    	; 0xebe <free+0x10c>
     df0:	ed 01       	movw	r28, r26
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ce 17       	cp	r28, r30
     df8:	df 07       	cpc	r29, r31
     dfa:	40 f4       	brcc	.+16     	; 0xe0c <free+0x5a>
     dfc:	4a 81       	ldd	r20, Y+2	; 0x02
     dfe:	5b 81       	ldd	r21, Y+3	; 0x03
     e00:	9e 01       	movw	r18, r28
     e02:	41 15       	cp	r20, r1
     e04:	51 05       	cpc	r21, r1
     e06:	f1 f0       	breq	.+60     	; 0xe44 <free+0x92>
     e08:	ea 01       	movw	r28, r20
     e0a:	f5 cf       	rjmp	.-22     	; 0xdf6 <free+0x44>
     e0c:	d3 83       	std	Z+3, r29	; 0x03
     e0e:	c2 83       	std	Z+2, r28	; 0x02
     e10:	40 81       	ld	r20, Z
     e12:	51 81       	ldd	r21, Z+1	; 0x01
     e14:	84 0f       	add	r24, r20
     e16:	95 1f       	adc	r25, r21
     e18:	c8 17       	cp	r28, r24
     e1a:	d9 07       	cpc	r29, r25
     e1c:	59 f4       	brne	.+22     	; 0xe34 <free+0x82>
     e1e:	88 81       	ld	r24, Y
     e20:	99 81       	ldd	r25, Y+1	; 0x01
     e22:	84 0f       	add	r24, r20
     e24:	95 1f       	adc	r25, r21
     e26:	02 96       	adiw	r24, 0x02	; 2
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	80 83       	st	Z, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	93 83       	std	Z+3, r25	; 0x03
     e32:	82 83       	std	Z+2, r24	; 0x02
     e34:	21 15       	cp	r18, r1
     e36:	31 05       	cpc	r19, r1
     e38:	29 f4       	brne	.+10     	; 0xe44 <free+0x92>
     e3a:	f0 93 90 01 	sts	0x0190, r31	; 0x800190 <__flp+0x1>
     e3e:	e0 93 8f 01 	sts	0x018F, r30	; 0x80018f <__flp>
     e42:	3d c0       	rjmp	.+122    	; 0xebe <free+0x10c>
     e44:	e9 01       	movw	r28, r18
     e46:	fb 83       	std	Y+3, r31	; 0x03
     e48:	ea 83       	std	Y+2, r30	; 0x02
     e4a:	49 91       	ld	r20, Y+
     e4c:	59 91       	ld	r21, Y+
     e4e:	c4 0f       	add	r28, r20
     e50:	d5 1f       	adc	r29, r21
     e52:	ec 17       	cp	r30, r28
     e54:	fd 07       	cpc	r31, r29
     e56:	61 f4       	brne	.+24     	; 0xe70 <free+0xbe>
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	02 96       	adiw	r24, 0x02	; 2
     e62:	e9 01       	movw	r28, r18
     e64:	99 83       	std	Y+1, r25	; 0x01
     e66:	88 83       	st	Y, r24
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
     e70:	e0 e0       	ldi	r30, 0x00	; 0
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	8d 91       	ld	r24, X+
     e78:	9c 91       	ld	r25, X
     e7a:	13 97       	sbiw	r26, 0x03	; 3
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	19 f0       	breq	.+6      	; 0xe86 <free+0xd4>
     e80:	fd 01       	movw	r30, r26
     e82:	dc 01       	movw	r26, r24
     e84:	f7 cf       	rjmp	.-18     	; 0xe74 <free+0xc2>
     e86:	8d 91       	ld	r24, X+
     e88:	9c 91       	ld	r25, X
     e8a:	11 97       	sbiw	r26, 0x01	; 1
     e8c:	9d 01       	movw	r18, r26
     e8e:	2e 5f       	subi	r18, 0xFE	; 254
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <__brkval>
     e9a:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <__brkval+0x1>
     e9e:	28 17       	cp	r18, r24
     ea0:	39 07       	cpc	r19, r25
     ea2:	69 f4       	brne	.+26     	; 0xebe <free+0x10c>
     ea4:	30 97       	sbiw	r30, 0x00	; 0
     ea6:	29 f4       	brne	.+10     	; 0xeb2 <free+0x100>
     ea8:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__flp+0x1>
     eac:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <__flp>
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <free+0x104>
     eb2:	13 82       	std	Z+3, r1	; 0x03
     eb4:	12 82       	std	Z+2, r1	; 0x02
     eb6:	b0 93 8e 01 	sts	0x018E, r27	; 0x80018e <__brkval+0x1>
     eba:	a0 93 8d 01 	sts	0x018D, r26	; 0x80018d <__brkval>
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <realloc>:
     ec4:	a0 e0       	ldi	r26, 0x00	; 0
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e8 e6       	ldi	r30, 0x68	; 104
     eca:	f7 e0       	ldi	r31, 0x07	; 7
     ecc:	0c 94 3c 08 	jmp	0x1078	; 0x1078 <__prologue_saves__+0x8>
     ed0:	ec 01       	movw	r28, r24
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	21 f4       	brne	.+8      	; 0xede <realloc+0x1a>
     ed6:	cb 01       	movw	r24, r22
     ed8:	0e 94 41 06 	call	0xc82	; 0xc82 <malloc>
     edc:	b4 c0       	rjmp	.+360    	; 0x1046 <realloc+0x182>
     ede:	fc 01       	movw	r30, r24
     ee0:	e6 0f       	add	r30, r22
     ee2:	f7 1f       	adc	r31, r23
     ee4:	9c 01       	movw	r18, r24
     ee6:	22 50       	subi	r18, 0x02	; 2
     ee8:	31 09       	sbc	r19, r1
     eea:	e2 17       	cp	r30, r18
     eec:	f3 07       	cpc	r31, r19
     eee:	08 f4       	brcc	.+2      	; 0xef2 <realloc+0x2e>
     ef0:	a8 c0       	rjmp	.+336    	; 0x1042 <realloc+0x17e>
     ef2:	d9 01       	movw	r26, r18
     ef4:	0d 91       	ld	r16, X+
     ef6:	1c 91       	ld	r17, X
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	06 17       	cp	r16, r22
     efc:	17 07       	cpc	r17, r23
     efe:	b0 f0       	brcs	.+44     	; 0xf2c <realloc+0x68>
     f00:	05 30       	cpi	r16, 0x05	; 5
     f02:	11 05       	cpc	r17, r1
     f04:	08 f4       	brcc	.+2      	; 0xf08 <realloc+0x44>
     f06:	9b c0       	rjmp	.+310    	; 0x103e <realloc+0x17a>
     f08:	c8 01       	movw	r24, r16
     f0a:	04 97       	sbiw	r24, 0x04	; 4
     f0c:	86 17       	cp	r24, r22
     f0e:	97 07       	cpc	r25, r23
     f10:	08 f4       	brcc	.+2      	; 0xf14 <realloc+0x50>
     f12:	95 c0       	rjmp	.+298    	; 0x103e <realloc+0x17a>
     f14:	02 50       	subi	r16, 0x02	; 2
     f16:	11 09       	sbc	r17, r1
     f18:	06 1b       	sub	r16, r22
     f1a:	17 0b       	sbc	r17, r23
     f1c:	01 93       	st	Z+, r16
     f1e:	11 93       	st	Z+, r17
     f20:	6d 93       	st	X+, r22
     f22:	7c 93       	st	X, r23
     f24:	cf 01       	movw	r24, r30
     f26:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <free>
     f2a:	89 c0       	rjmp	.+274    	; 0x103e <realloc+0x17a>
     f2c:	5b 01       	movw	r10, r22
     f2e:	a0 1a       	sub	r10, r16
     f30:	b1 0a       	sbc	r11, r17
     f32:	4c 01       	movw	r8, r24
     f34:	80 0e       	add	r8, r16
     f36:	91 1e       	adc	r9, r17
     f38:	a0 91 8f 01 	lds	r26, 0x018F	; 0x80018f <__flp>
     f3c:	b0 91 90 01 	lds	r27, 0x0190	; 0x800190 <__flp+0x1>
     f40:	61 2c       	mov	r6, r1
     f42:	71 2c       	mov	r7, r1
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
     f48:	10 97       	sbiw	r26, 0x00	; 0
     f4a:	09 f4       	brne	.+2      	; 0xf4e <realloc+0x8a>
     f4c:	46 c0       	rjmp	.+140    	; 0xfda <realloc+0x116>
     f4e:	8d 91       	ld	r24, X+
     f50:	9c 91       	ld	r25, X
     f52:	11 97       	sbiw	r26, 0x01	; 1
     f54:	a8 15       	cp	r26, r8
     f56:	b9 05       	cpc	r27, r9
     f58:	b1 f5       	brne	.+108    	; 0xfc6 <realloc+0x102>
     f5a:	6c 01       	movw	r12, r24
     f5c:	42 e0       	ldi	r20, 0x02	; 2
     f5e:	c4 0e       	add	r12, r20
     f60:	d1 1c       	adc	r13, r1
     f62:	ca 14       	cp	r12, r10
     f64:	db 04       	cpc	r13, r11
     f66:	78 f1       	brcs	.+94     	; 0xfc6 <realloc+0x102>
     f68:	4c 01       	movw	r8, r24
     f6a:	8a 18       	sub	r8, r10
     f6c:	9b 08       	sbc	r9, r11
     f6e:	64 01       	movw	r12, r8
     f70:	42 e0       	ldi	r20, 0x02	; 2
     f72:	c4 0e       	add	r12, r20
     f74:	d1 1c       	adc	r13, r1
     f76:	12 96       	adiw	r26, 0x02	; 2
     f78:	bc 90       	ld	r11, X
     f7a:	12 97       	sbiw	r26, 0x02	; 2
     f7c:	13 96       	adiw	r26, 0x03	; 3
     f7e:	ac 91       	ld	r26, X
     f80:	b5 e0       	ldi	r27, 0x05	; 5
     f82:	cb 16       	cp	r12, r27
     f84:	d1 04       	cpc	r13, r1
     f86:	40 f0       	brcs	.+16     	; 0xf98 <realloc+0xd4>
     f88:	b2 82       	std	Z+2, r11	; 0x02
     f8a:	a3 83       	std	Z+3, r26	; 0x03
     f8c:	91 82       	std	Z+1, r9	; 0x01
     f8e:	80 82       	st	Z, r8
     f90:	d9 01       	movw	r26, r18
     f92:	6d 93       	st	X+, r22
     f94:	7c 93       	st	X, r23
     f96:	09 c0       	rjmp	.+18     	; 0xfaa <realloc+0xe6>
     f98:	0e 5f       	subi	r16, 0xFE	; 254
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	80 0f       	add	r24, r16
     f9e:	91 1f       	adc	r25, r17
     fa0:	f9 01       	movw	r30, r18
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	80 83       	st	Z, r24
     fa6:	eb 2d       	mov	r30, r11
     fa8:	fa 2f       	mov	r31, r26
     faa:	e1 14       	cp	r14, r1
     fac:	f1 04       	cpc	r15, r1
     fae:	31 f0       	breq	.+12     	; 0xfbc <realloc+0xf8>
     fb0:	d7 01       	movw	r26, r14
     fb2:	13 96       	adiw	r26, 0x03	; 3
     fb4:	fc 93       	st	X, r31
     fb6:	ee 93       	st	-X, r30
     fb8:	12 97       	sbiw	r26, 0x02	; 2
     fba:	41 c0       	rjmp	.+130    	; 0x103e <realloc+0x17a>
     fbc:	f0 93 90 01 	sts	0x0190, r31	; 0x800190 <__flp+0x1>
     fc0:	e0 93 8f 01 	sts	0x018F, r30	; 0x80018f <__flp>
     fc4:	3c c0       	rjmp	.+120    	; 0x103e <realloc+0x17a>
     fc6:	68 16       	cp	r6, r24
     fc8:	79 06       	cpc	r7, r25
     fca:	08 f4       	brcc	.+2      	; 0xfce <realloc+0x10a>
     fcc:	3c 01       	movw	r6, r24
     fce:	7d 01       	movw	r14, r26
     fd0:	12 96       	adiw	r26, 0x02	; 2
     fd2:	0d 90       	ld	r0, X+
     fd4:	bc 91       	ld	r27, X
     fd6:	a0 2d       	mov	r26, r0
     fd8:	b7 cf       	rjmp	.-146    	; 0xf48 <realloc+0x84>
     fda:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__brkval>
     fde:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <__brkval+0x1>
     fe2:	88 16       	cp	r8, r24
     fe4:	99 06       	cpc	r9, r25
     fe6:	e1 f4       	brne	.+56     	; 0x1020 <realloc+0x15c>
     fe8:	66 16       	cp	r6, r22
     fea:	77 06       	cpc	r7, r23
     fec:	c8 f4       	brcc	.+50     	; 0x1020 <realloc+0x15c>
     fee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ff2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	41 f4       	brne	.+16     	; 0x100a <realloc+0x146>
     ffa:	8d b7       	in	r24, 0x3d	; 61
     ffc:	9e b7       	in	r25, 0x3e	; 62
     ffe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1002:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1006:	84 1b       	sub	r24, r20
    1008:	95 0b       	sbc	r25, r21
    100a:	e8 17       	cp	r30, r24
    100c:	f9 07       	cpc	r31, r25
    100e:	c8 f4       	brcc	.+50     	; 0x1042 <realloc+0x17e>
    1010:	f0 93 8e 01 	sts	0x018E, r31	; 0x80018e <__brkval+0x1>
    1014:	e0 93 8d 01 	sts	0x018D, r30	; 0x80018d <__brkval>
    1018:	f9 01       	movw	r30, r18
    101a:	71 83       	std	Z+1, r23	; 0x01
    101c:	60 83       	st	Z, r22
    101e:	0f c0       	rjmp	.+30     	; 0x103e <realloc+0x17a>
    1020:	cb 01       	movw	r24, r22
    1022:	0e 94 41 06 	call	0xc82	; 0xc82 <malloc>
    1026:	7c 01       	movw	r14, r24
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	59 f0       	breq	.+22     	; 0x1042 <realloc+0x17e>
    102c:	a8 01       	movw	r20, r16
    102e:	be 01       	movw	r22, r28
    1030:	0e 94 28 08 	call	0x1050	; 0x1050 <memcpy>
    1034:	ce 01       	movw	r24, r28
    1036:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <free>
    103a:	c7 01       	movw	r24, r14
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <realloc+0x182>
    103e:	ce 01       	movw	r24, r28
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <realloc+0x182>
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	ee e0       	ldi	r30, 0x0E	; 14
    104c:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__epilogue_restores__+0x8>

00001050 <memcpy>:
    1050:	fb 01       	movw	r30, r22
    1052:	dc 01       	movw	r26, r24
    1054:	02 c0       	rjmp	.+4      	; 0x105a <memcpy+0xa>
    1056:	01 90       	ld	r0, Z+
    1058:	0d 92       	st	X+, r0
    105a:	41 50       	subi	r20, 0x01	; 1
    105c:	50 40       	sbci	r21, 0x00	; 0
    105e:	d8 f7       	brcc	.-10     	; 0x1056 <memcpy+0x6>
    1060:	08 95       	ret

00001062 <memset>:
    1062:	dc 01       	movw	r26, r24
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <memset+0x6>
    1066:	6d 93       	st	X+, r22
    1068:	41 50       	subi	r20, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	e0 f7       	brcc	.-8      	; 0x1066 <memset+0x4>
    106e:	08 95       	ret

00001070 <__prologue_saves__>:
    1070:	2f 92       	push	r2
    1072:	3f 92       	push	r3
    1074:	4f 92       	push	r4
    1076:	5f 92       	push	r5
    1078:	6f 92       	push	r6
    107a:	7f 92       	push	r7
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	ca 1b       	sub	r28, r26
    109a:	db 0b       	sbc	r29, r27
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	09 94       	ijmp

000010a8 <__epilogue_restores__>:
    10a8:	2a 88       	ldd	r2, Y+18	; 0x12
    10aa:	39 88       	ldd	r3, Y+17	; 0x11
    10ac:	48 88       	ldd	r4, Y+16	; 0x10
    10ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    10b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    10ba:	b9 84       	ldd	r11, Y+9	; 0x09
    10bc:	c8 84       	ldd	r12, Y+8	; 0x08
    10be:	df 80       	ldd	r13, Y+7	; 0x07
    10c0:	ee 80       	ldd	r14, Y+6	; 0x06
    10c2:	fd 80       	ldd	r15, Y+5	; 0x05
    10c4:	0c 81       	ldd	r16, Y+4	; 0x04
    10c6:	1b 81       	ldd	r17, Y+3	; 0x03
    10c8:	aa 81       	ldd	r26, Y+2	; 0x02
    10ca:	b9 81       	ldd	r27, Y+1	; 0x01
    10cc:	ce 0f       	add	r28, r30
    10ce:	d1 1d       	adc	r29, r1
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	ed 01       	movw	r28, r26
    10dc:	08 95       	ret

000010de <_exit>:
    10de:	f8 94       	cli

000010e0 <__stop_program>:
    10e0:	ff cf       	rjmp	.-2      	; 0x10e0 <__stop_program>
